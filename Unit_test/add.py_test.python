import unittest
from unittest.mock import patch

class TestSumOfElements(unittest.TestCase):
    def test_sum_of_elements(self):
        # Test with valid input
        array = [1, 2, 3, 4, 5]
        self.assertEqual(sum_of_elements(array), 15)

        # Test with empty input
        array = []
        self.assertEqual(sum_of_elements(array), 0)

        # Test with invalid input
        array = "invalid"
        self.assertRaises(TypeError, sum_of_elements, array)

        # Test with null input
        array = None
        self.assertRaises(TypeError, sum_of_elements, array)

        # Test with negative numbers
        array = [-1, -2, -3, -4, -5]
        self.assertEqual(sum_of_elements(array), -15)

        # Test with decimal numbers
        array = [1.5, 2.5, 3.5, 4.5, 5.5]
        self.assertEqual(sum_of_elements(array), 17.5)

        # Test with large numbers
        array = [1000000000, 2000000000, 3000000000]
        self.assertEqual(sum_of_elements(array), 6000000000)

    @patch('builtins.print')
    def test_print_sum_of_elements(self, mock_print):
        # Test if the function prints the correct sum
        array = [1, 2, 3, 4, 5]
        sum_of_elements(array)
        mock_print.assert_called_with("Sum of elements:", 15)

if __name__ == '__main__':
    unittest.main()