import unittest
from unittest.mock import patch

class TestCalculateRectangleArea(unittest.TestCase):
    @patch("builtins.print")
    def test_rectangle_area_with_positive_values(self, mock_print):
        length = 5
        width = 3
        expected_area = 15
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(actual_area, expected_area)
        mock_print.assert_called_with("Area of rectangle:", expected_area)

    @patch("builtins.print")
    def test_rectangle_area_with_zero_length(self, mock_print):
        length = 0
        width = 3
        expected_area = 0
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(actual_area, expected_area)
        mock_print.assert_called_with("Area of rectangle:", expected_area)

    @patch("builtins.print")
    def test_rectangle_area_with_zero_width(self, mock_print):
        length = 5
        width = 0
        expected_area = 0
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(actual_area, expected_area)
        mock_print.assert_called_with("Area of rectangle:", expected_area)

    @patch("builtins.print")
    def test_rectangle_area_with_negative_length(self, mock_print):
        length = -5
        width = 3
        expected_area = -15
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(actual_area, expected_area)
        mock_print.assert_called_with("Area of rectangle:", expected_area)

    @patch("builtins.print")
    def test_rectangle_area_with_negative_width(self, mock_print):
        length = 5
        width = -3
        expected_area = -15
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(actual_area, expected_area)
        mock_print.assert_called_with("Area of rectangle:", expected_area)

if __name__ == "__main__":
    unittest.main()