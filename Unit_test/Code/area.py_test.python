import unittest
from unittest.mock import patch

class TestCalculateRectangleArea(unittest.TestCase):

    @patch('builtins.print')
    def test_calculate_rectangle_area_with_positive_length_and_width(self, mock_print):
        # Arrange
        length = 5
        width = 3

        # Act
        result = calculate_rectangle_area(length, width)

        # Assert
        mock_print.assert_called_with("Length:", length)
        mock_print.assert_called_with("Width:", width)
        mock_print.assert_called_with("Area of rectangle:", result)
        self.assertEqual(result, 15.0)

    @patch('builtins.print')
    def test_calculate_rectangle_area_with_zero_length_and_width(self, mock_print):
        # Arrange
        length = 0
        width = 0

        # Act
        result = calculate_rectangle_area(length, width)

        # Assert
        mock_print.assert_called_with("Length:", length)
        mock_print.assert_called_with("Width:", width)
        mock_print.assert_called_with("Area of rectangle:", result)
        self.assertEqual(result, 0)

    @patch('builtins.print')
    def test_calculate_rectangle_area_with_negative_length_and_width(self, mock_print):
        # Arrange
        length = -5
        width = -3

        # Act
        result = calculate_rectangle_area(length, width)

        # Assert
        mock_print.assert_called_with("Length:", length)
        mock_print.assert_called_with("Width:", width)
        mock_print.assert_called_with("Area of rectangle:", result)
        self.assertEqual(result, 15.0)

if __name__ == "__main__":
    unittest.main()