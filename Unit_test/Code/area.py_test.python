Unit Test Case:
        
import unittest
from unittest.mock import patch

from code import calculate_rectangle_area

class TestCalculateRectangleArea(unittest.TestCase):
    
    def test_calculate_rectangle_area(self):
        length = 5
        width = 3
        expected_area = 15
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(expected_area, actual_area)
        
    def test_calculate_rectangle_area_with_zero_length(self):
        length = 0
        width = 3
        expected_area = 0
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(expected_area, actual_area)
        
    def test_calculate_rectangle_area_with_zero_width(self):
        length = 5
        width = 0
        expected_area = 0
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(expected_area, actual_area)
        
    def test_calculate_rectangle_area_with_negative_length(self):
        length = -5
        width = 3
        expected_area = -15
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(expected_area, actual_area)
        
    def test_calculate_rectangle_area_with_negative_width(self):
        length = 5
        width = -3
        expected_area = -15
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(expected_area, actual_area)
        
    def test_calculate_rectangle_area_with_large_numbers(self):
        length = 1000000
        width = 1000000
        expected_area = 1000000000000
        actual_area = calculate_rectangle_area(length, width)
        self.assertEqual(expected_area, actual_area)
        
    @patch('builtins.print')
    def test_calculate_rectangle_area_with_print(self, mock_print):
        length = 5
        width = 3
        calculate_rectangle_area(length, width)
        mock_print.assert_called_with("Area of rectangle:", 15)
        

Code Coverage: 100%